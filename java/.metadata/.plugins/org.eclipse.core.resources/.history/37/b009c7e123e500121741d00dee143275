/**
 * Camera surface view class for android applications
 * @author Travis Gall
 */

package com.example.bigbrother;

//IMPORTS
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import android.content.Context;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.os.Environment;
import android.util.Log;
import android.view.Display;
import android.view.Surface;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.WindowManager;

//CLASS
public class CameraSurfaceView extends SurfaceView implements SurfaceHolder.Callback, PictureCallback {
	/** Debug Log: Class Name */
	private static final String TAG = CameraSurfaceView.class.getSimpleName();
	
	//CONSTANTS
	private static final int DEGREE_0 = 0;
	private static final int DEGREE_90 = 90;
	private static final int DEGREE_180 = 180;
	
	//VARIABLES
	private Context context;
	private SurfaceHolder holder;
	
	private Camera camera;

	private CameraThread cameraThread;
	
	/** 
	 * Default constructor. 
	 */
	@SuppressWarnings("deprecation")
	public CameraSurfaceView(Context context) {
	    super(context);
	    
	    //Debug
		Log.d(TAG, "CameraSurfaceView: Start...");
		
		//Store context
	    this.context = context;
	    
	    //Set and update holder
	    holder = getHolder();
	    holder.addCallback(this);
	    holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
	    holder.setKeepScreenOn(true);

	    //this.cameraThread = new CameraThread(this);
	    
	    //Debug
		Log.d(TAG, "CameraSurfaceView: Stop...");
	}

	/** 
	 * This is called immediately after the surface is first created. 
	 * @param holder  The SurfaceHolder whose surface is being created.
	 */
	@Override
	public void surfaceCreated(SurfaceHolder holder) {
	    //Debug
		Log.d(TAG, "CameraSurfaceView.surfaceCreated(): Start...");
		
		//Get default camera (back-facing camera on most devices)
		camera = Camera.open();
		
		//Set preview display
	    try {
	        if (camera != null) {
	            camera.setPreviewDisplay(holder);
	        }
	    }
	    catch (IOException e) {
	        Log.e(TAG, "CameraSurfaceView.surfaceCreated(): IOException", e);
	    }
	    
	    //Debug
		Log.d(TAG, "CameraSurfaceView.surfaceCreated(): Stop...");
	}

	/** 
	 * This is called immediately after any structural changes (format or size) have been made to the surface. 
	 * @param holder The SurfaceHolder whose surface has changed. 
	 * @param format The new PixelFormat of the surface. 
	 * @param width The new width of the surface. 
	 * @param height The new height of the surface.  

	 */
	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
	    //Debug
		Log.d(TAG, "CameraSurfaceView.surfaceChanged(): Start...");
		
		//Stop any previews prior to changing orientation
		camera.stopPreview();
		
		//Ensure camera has been selected
	    if (camera != null) {
	    	//Get current parameters
	        Camera.Parameters parameters = camera.getParameters();
	        
	        //TODO Could be less "choppy"
	        //Adjust camera preview SIZE and ORIENTATION for current device rotation
	        Display display = ((WindowManager)context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();   
		    switch (display.getRotation()) {
	    		case Surface.ROTATION_0: 
	    			parameters.setPreviewSize(height, width);
	    			camera.setDisplayOrientation(DEGREE_90); 
	    			break;
	    		case Surface.ROTATION_90: 
	    			parameters.setPreviewSize(width, height);
	    			camera.setDisplayOrientation(DEGREE_0); 
	    			break;
	    		case Surface.ROTATION_270: 
	    			parameters.setPreviewSize(width, height);
	    			camera.setDisplayOrientation(DEGREE_180); 
	    			break;
		    }
		    
		    //Update camera parameters
		    camera.setParameters(parameters);
	        
		    //Start the preview display
	        camera.startPreview();

		    
		    //cameraThread.start();
		    //Debug
			Log.d(TAG, "CameraSurfaceView.surfaceChanged(): Stop...");
	    }
	}

	/** 
	 * This is called immediately before a surface is being destroyed.
	 * @param holder The SurfaceHolder whose surface is being destroyed.
	 */
	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {
	    //Debug
		Log.d(TAG, "CameraSurfaceView.surfaceDestroyed(): Start...");
		
	    //Stop preview and release camera for other surfaces
	    if (camera != null) {
	        camera.stopPreview();
	        camera.release();
	        camera = null;
	    }
	    
	    try {
			cameraThread.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    //cameraThread = null;
	    
	    //Debug
		Log.d(TAG, "CameraSurfaceView.surfaceDestroyed(): Stop...");
	}
	
	public void takePicture(PictureCallback pictureCallback) {
		camera.takePicture(null, null, pictureCallback);
	}
}